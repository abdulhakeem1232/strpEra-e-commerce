const express = require('express')
const controller = require('../controller/usercontroller/user_controller.js')
const productcontroller = require('./../controller/usercontroller/product_controller.js')
const cartController = require('./../controller/usercontroller/cart_controller.js')
const checkoutController = require('../controller/usercontroller/checkout_controller.js')
const middleware = require('./../../middleware.js')

const router = express.Router()

router.get('/', controller.index)
router.get('/login', middleware.iflooged, controller.login)
router.get('/reg', middleware.iflooged, controller.signup)
router.post('/regpost', controller.regpost)
router.get('/otp', middleware.isotp, controller.otp)
router.post('/verifyotp', controller.verifyotp)
router.post('/resendotp', controller.resendotp)
router.get('/forgotpassword', controller.forgotpassword)
router.post('/loginpost', controller.loginpost)
router.get('/logout', controller.logout)
router.post('/forgotpasswordpost', controller.forgotpasswordpost)
router.get('/newpassword', controller.newpassword)
router.post('/resetpassword', controller.resetpassword)
router.get('/shop/:id', productcontroller.shopping)
router.get('/subshop/:pid/:sid', productcontroller.subshopping)
router.get('/singleproduct/:id', productcontroller.singleproduct)
router.get('/sortproduct/:sort', productcontroller.sortproducts)
router.post('/search', productcontroller.search)
router.get('/wallet', middleware.islogged, middleware.userStatus, controller.wallet)
router.post('/walletcreate/orderId', controller.walletupi)
router.post('/walletTopup', controller.walletTopup)

router.post('/add-to-cart/:pid', cartController.addTocart)
router.get('/showcart', middleware.islogged, middleware.userStatus, cartController.showcart)
router.get('/deletcart/:id/:size', middleware.islogged, middleware.userStatus, cartController.deletecart)
router.post('/update-cart-quantity/:productId/:size', middleware.islogged, middleware.userStatus, cartController.updatecart)

router.get('/profile', middleware.islogged, middleware.userStatus, controller.profile)
router.post('/sendreferral', middleware.islogged, middleware.userStatus, controller.referral)
router.get('/editProfile', middleware.islogged, middleware.userStatus, controller.profileEdit)
router.post('/profileUpdating', middleware.islogged, middleware.userStatus, controller.profileUpdate)
router.get('/address', middleware.islogged, middleware.userStatus, controller.address)
router.get('/addAddress', middleware.islogged, middleware.userStatus, controller.newAddress)
router.post('/addressUpdating', middleware.islogged, middleware.userStatus, controller.addressUpdate)
router.get('/changepassword', middleware.islogged, middleware.userStatus, controller.changepassword)
router.post('/passwordUpdating', middleware.islogged, middleware.userStatus, controller.passwordUpdate)
router.get('/editAddress/:id', middleware.islogged, middleware.userStatus, controller.editAddress)
router.get('/deleteAddress/:id', middleware.islogged, middleware.userStatus, controller.deleteAddress)
router.post('/addressupdated/:id', middleware.islogged, middleware.userStatus, controller.addressPost)

router.get('/checkout', middleware.islogged, middleware.userStatus, checkoutController.checkout)
router.post('/order', middleware.islogged, middleware.userStatus, checkoutController.order)
router.get('/orderhistory', middleware.islogged, middleware.userStatus, checkoutController.orders)
router.get('/cancelorder/:id', middleware.islogged, middleware.userStatus, checkoutController.ordercancelling)
router.get('/returnorder/:id', middleware.islogged, middleware.userStatus, checkoutController.orderreturning)
router.get('/order-tracking/:id', middleware.islogged, middleware.userStatus, checkoutController.ordertracking)
router.post('/create/orderId', middleware.islogged, middleware.userStatus, checkoutController.upi)
router.get('/pdf/:id', middleware.islogged, middleware.userStatus, checkoutController.pdfmaker)

router.get('/wishlist/:id', middleware.islogged, middleware.userStatus, checkoutController.addToFav)
router.get('/fav', middleware.islogged, middleware.userStatus, checkoutController.viewFav)
router.get('/removefromfavorites/:id', middleware.islogged, middleware.userStatus, checkoutController.removeFav)
router.post('/apply-coupon', middleware.islogged, middleware.userStatus, checkoutController.applycoupon)
router.post('/wallettransaction', middleware.islogged, middleware.userStatus, checkoutController.wallet)
router.post('/addRatings', middleware.islogged, middleware.userStatus, checkoutController.addratings)




router.get('/error', middleware.islogged, controller.error)

module.exports = router
